#include "std_macros.funky"
#macro \:($name) get("$1")

do
(
	def("Substr" "_txt" "_i0" "_i1" function(
		if(_i1 < count(:_txt); do(
			_str = "";
			_i = :_i0;
			while(less(:_i add(:_i1 1)) do(
				_str = add(:_str get_elem(:_txt :_i));
				_i++;
			))
			return_copy(:_str)
		))
		return_copy("")
	))
	
	def("TrimFront" "_txt" function(
		_i = 0;
		set_copy("_break1" false)
		
		while(and(_i < count(:_txt); not(:_break1)) do(
			_c = get_elem(:_txt :_i);
			if(and(not(equal(:_c "\t")) and(not(equal(:_c "\n")) not(equal(:_c " ")))) do(
				set_copy("_break1" true)
			)
			do(
				_i++;		
			))
		))
		
		return_ref(get("Substr" :_txt :_i sub(count(:_txt) 1)))
	))
	
	def("TrimBack" "_txt" function(
		_i = sub(count(:_txt) 1);
		set_copy("_break1" false)
		
		while(and(_i >= 0; not(:_break1)) do(
			_c = get_elem(:_txt :_i);
			if(and(not(equal(:_c "\t")) and(not(equal(:_c "\n")) not(equal(:_c " ")))) do(
				set_copy("_break1" true)
			)
			do(
				_i--;		
			))
		))
		
		return_ref(get("Substr" :_txt 0 :_i))
	))
	
	def("Trim" "_txt" function(
		return_ref(get("TrimBack" get("TrimFront" :_txt)))
	))

	text = "";
	call_cpp("read_txt" "class.funky" get("text"))
	
	set_copy("lines" list)
	lineStart = 0;
	i = 0;
	while(i < count(get("text")); do(
		if(equal(get_elem(:text :i) "\n") do(
			line r= get("Trim" get("Substr" :text :lineStart :i));
			if(less(0 count(:line)) do(
				push_copy(:lines :line)
			))
			i++;
			lineStart = i;
		))
		i++;
	))
	
	i = 0;
	while(i < count(:lines); do( 
		print(:i ": " get_elem(:lines :i) "\n")
		i++;
	))
)